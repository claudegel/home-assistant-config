

climate:
  #################################################################################
  # ## Name: climate.bathroom_heater
  - platform: generic_thermostat
    name: Bathroom Heater
    heater: switch.bathroom_heater_wall_plug
    target_sensor: sensor.rfxcom_bathroom_temperature
    target_temp: 24
    cold_tolerance: .5
    hot_tolerance: .5
    away_temp: 7
  #################################################################################
  # - platform: smart_thermostat
  #   name: Bathroom Heater
  #   heater: switch.bathroom_heater_wall_plug
  #   target_sensor: sensor.rfxcom_bathroom_temperature
  #   min_temp: 18
  #   max_temp: 28
  #   ac_mode: False 
  #   target_temp: 24
  #   # keep_alive:
  #   #   seconds: 5
  #   initial_operation_mode: "off"
  #   away_temp: 7
  #   kp : 34
  #   ki : 40
  #   kd : 160
  #   pwm : 10
  #   autotune : ziegler-nichols
  #   difference : 100
  #   noiseband : 0.5



input_boolean:
  schedule_morning_bathroom_confort:
    name: Schedule Morning Bathroom Confort
    icon: mdi:weather-sunset-up


input_datetime:
  quick_bathroom_confort_time:
    name: Confort Start Time
    has_date: false
    has_time: true
    icon: mdi:radiator


script:
  set_bathroom_confortable:
    alias: 'Quick Bathroom confort'
    sequence:
      - service: switch.turn_on
        entity_id: switch.bathroom_heater_wall_plug
      - service: climate.set_operation_mode
        data_template:
          entity_id: "climate.bathroom_heater"
          operation_mode: "heat"
      # - service: notify.pushover
      #   data:
      #     message: 'Bathroom Heater enabled'


automation:

  # # Set the bathroom heater to awake at 4am every morning
  # - alias: 'Scheduled Bathroom Confort'
  #   trigger:
  #     platform: template
  #     value_template: "{{ states('sensor.time') == (states.input_datetime.quick_bathroom_confort_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  #   condition:
  #     condition: state
  #     entity_id: input_boolean.schedule_morning_bathroom_confort
  #     state: 'on'
  #   action:
  #     # - service: switch.turn_on
  #     #   entity_id: switch.bathroom_heater_wall_plug
  #     - service: climate.set_operation_mode
  #       data_template:
  #         entity_id: "climate.bathroom_heater"
  #         operation_mode: "heat"

  # Backup in case of the heater has been manually started.
  # name: auto_stop_bathroom_heater_after_2h
  - alias: 'Auto stop Bathroom Heater after 2h'
    trigger:
      platform: state
      entity_id: climate.bathroom_heater
      to: 'heat'
    action:
      - delay: '02:00:00'
      - service: notify.pushover
        data:
          message: 'Bathroom heater timeout'
      - service: climate.set_operation_mode
        data_template:
          entity_id: "climate.bathroom_heater"
          operation_mode: "off"
      - service: switch.turn_off
        entity_id: switch.rfxcom_bathroom_heater_remote


  # # Stop when quich switch is turned off
  # - alias: 'Stop Bathroom Confort on quick off'
  #   trigger:
  #     platform: state
  #     entity_id: script.set_bathroom_confortable
  #     to: 'off'
  #   action:
  #     # - service: switch.turn_off
  #     #   entity_id: switch.bathroom_heater_wall_plug
  #     - service: climate.set_operation_mode
  #       data_template:
  #         entity_id: "climate.bathroom_heater"
  #         operation_mode: "off"
  #     - service: switch.turn_off
  #       entity_id: switch.rfxcom_bathroom_heater_remote
  #     - service: homeassistant.turn_off
  #       entity_id: automation.auto_stop_bathroom_heater_after_2h

  - alias: "Remote bathroom confort trigger on"
    trigger:
      platform: state
      entity_id: switch.rfxcom_bathroom_heater_remote
      to: 'on'
      # platform: event
      # event_type: button_pressed
      # event_data:
      #   state: "on"
      #   entity_id: "switch.rfxcom_bathroom_heater_remote"
    action:
      service: script.set_bathroom_confortable

  - alias: "Remote bathroom confort trigger off"
    trigger:
      platform: state
      entity_id: switch.rfxcom_bathroom_heater_remote
      to: 'off'
      # platform: event
      # event_type: button_pressed
      # event_data:
      #   state: "off"
      #   entity_id: "switch.rfxcom_bathroom_heater_remote"
    action:
      - service: climate.set_operation_mode
        data_template:
          entity_id: "climate.bathroom_heater"
          operation_mode: "off"
      # - service: switch.turn_off
      #   entity_id: switch.bathroom_heater_wall_plug
      - service: homeassistant.turn_off
        entity_id: automation.auto_stop_bathroom_heater_after_2h


homeassistant:
  customize:
    switch.rfxcom_bathroom_heater_remote:
      icon: mdi:remote
      can_cancel: false
      custom_text: "DIO remote to turn on bathroom heater"
      assumed_state: False
    
    script.set_bathroom_confortable:
      icon: mdi:radiator
      can_cancel: false

group:

  bathroom_climate:
    name: Bathroom Heater
    control: hidden
    entities:
      - climate.bathroom_heater
      - switch.rfxcom_bathroom_heater_remote

  bathroom_climate_config:
    name: Bathroom Heater Config
    control: hidden
    entities:
      - climate.bathroom_heater
      - switch.rfxcom_bathroom_heater_remote
      - switch.bathroom_heater_wall_plug
    
  bathroom_climate_schedule_config:
    name: Bath Heater Shedule
    control: hidden
    entities:
      - input_boolean.schedule_morning_bathroom_confort
      - input_datetime.quick_bathroom_confort_time

  measurement_view:
    entities:
      - group.bathroom_climate_config
      - group.bathroom_climate_schedule_config

recorder:
  include:
    entities:
      - climate.bathroom_heater
      - script.set_bathroom_confortable
      - input_datetime.quick_bathroom_confort_time
      - input_boolean.schedule_morning_bathroom_confort
      - switch.rfxcom_bathroom_heater_remote
